# What is the Factory Pattern

- When a method returns one of several possible classes.
    - Create a new "enemy" in a game
    - Random number generator picks a number assigned to a specific enemy
    - The factory returns the enemy associated with that number

!The class is chosen at *RUN TIME*

# When to use Factory Pattern


- When you don't know ahead of time what class object you need
- When all of the potential classes are in the same subclass hierarchy (share common superclass)
- To centralize class selection code (random enemy for example)
- When you don't want the user to have to know every subclass
- To encapsulate object creation